import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class p1697 {

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(new BufferedOutputStream(System.out));
        StringTokenizer st;
        StringBuilder sb = new StringBuilder("");

        st = new StringTokenizer(br.readLine());

        int old = Integer.parseInt(st.nextToken());
        int young = Integer.parseInt(st.nextToken());

        Queue<Integer> queue = new LinkedList<>();
        int d[];
        boolean visit[];
        int max_value = 1000000;

        visit = new boolean[max_value];
        d = new int[max_value];

        queue.offer(old);

        while(!queue.isEmpty()){
            int temp = queue.poll();
            if(temp == young) break;
            if(temp-1>=0 &&!visit[temp-1]){
                queue.offer(temp-1);
                d[temp-1]=d[temp]+1;
                visit[temp-1] = true;
            }
            if(temp+1 < max_value && !visit[temp+1]){
                queue.offer(temp+1);
                d[temp+1]=d[temp]+1;
                visit[temp+1] = true;
            }
            if(temp*2 < max_value && !visit[temp*2]) {
                queue.offer(temp * 2);
                d[temp * 2] = d[temp] + 1;
                visit[temp * 2] = true;
            }
        }
        sb.append(d[young]);
        pw.write(sb.toString());
        pw.close();


    }
}
